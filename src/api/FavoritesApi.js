/**
 * Spartera API Documentation
 * Auto-generated API documentation for REST services of the Spartera platform
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@spartera.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdDelete200Response from '../model/CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdDelete200Response';
import CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdGet200Response from '../model/CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdGet200Response';
import CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdPatch200Response from '../model/CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdPatch200Response';
import CompaniesCompanyIdUsersUserIdFavoritesGet200Response from '../model/CompaniesCompanyIdUsersUserIdFavoritesGet200Response';
import CompaniesCompanyIdUsersUserIdFavoritesPost200Response from '../model/CompaniesCompanyIdUsersUserIdFavoritesPost200Response';
import Favorite from '../model/Favorite';
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineObject2 from '../model/InlineObject2';
import InlineObject3 from '../model/InlineObject3';

/**
* Favorites service.
* @module api/FavoritesApi
* @version 0.0.0
*/
export default class FavoritesApi {

    /**
    * Constructs a new FavoritesApi. 
    * @alias module:api/FavoritesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get all favorites for the specified user in a specific category
     * @param {String} companyId 
     * @param {String} userId 
     * @param {String} category 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdGet200Response} and HTTP response
     */
    companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGetWithHttpInfo(companyId, userId, category) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGet");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGet");
      }
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGet");
      }

      let pathParams = {
        'company_id': companyId,
        'user_id': userId,
        'category': category
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdGet200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/users/{user_id}/favorites/category/{category}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all favorites for the specified user in a specific category
     * @param {String} companyId 
     * @param {String} userId 
     * @param {String} category 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdGet200Response}
     */
    companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGet(companyId, userId, category) {
      return this.companiesCompanyIdUsersUserIdFavoritesCategoryCategoryGetWithHttpInfo(companyId, userId, category)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Check if the specified user has favorited a specific asset
     * @param {String} companyId 
     * @param {String} userId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdGet200Response} and HTTP response
     */
    companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGetWithHttpInfo(companyId, userId, assetId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGet");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGet");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGet");
      }

      let pathParams = {
        'company_id': companyId,
        'user_id': userId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdGet200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/users/{user_id}/favorites/check/{asset_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Check if the specified user has favorited a specific asset
     * @param {String} companyId 
     * @param {String} userId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdGet200Response}
     */
    companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGet(companyId, userId, assetId) {
      return this.companiesCompanyIdUsersUserIdFavoritesCheckAssetIdGetWithHttpInfo(companyId, userId, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete single favorite by ID (unfavorite an asset)
     * @param {String} companyId 
     * @param {String} userId 
     * @param {String} favoriteId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdDelete200Response} and HTTP response
     */
    companiesCompanyIdUsersUserIdFavoritesFavoriteIdDeleteWithHttpInfo(companyId, userId, favoriteId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdUsersUserIdFavoritesFavoriteIdDelete");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling companiesCompanyIdUsersUserIdFavoritesFavoriteIdDelete");
      }
      // verify the required parameter 'favoriteId' is set
      if (favoriteId === undefined || favoriteId === null) {
        throw new Error("Missing the required parameter 'favoriteId' when calling companiesCompanyIdUsersUserIdFavoritesFavoriteIdDelete");
      }

      let pathParams = {
        'company_id': companyId,
        'user_id': userId,
        'favorite_id': favoriteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdDelete200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/users/{user_id}/favorites/{favorite_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete single favorite by ID (unfavorite an asset)
     * @param {String} companyId 
     * @param {String} userId 
     * @param {String} favoriteId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdDelete200Response}
     */
    companiesCompanyIdUsersUserIdFavoritesFavoriteIdDelete(companyId, userId, favoriteId) {
      return this.companiesCompanyIdUsersUserIdFavoritesFavoriteIdDeleteWithHttpInfo(companyId, userId, favoriteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get single favorite by ID
     * @param {String} companyId 
     * @param {String} userId 
     * @param {String} favoriteId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdGet200Response} and HTTP response
     */
    companiesCompanyIdUsersUserIdFavoritesFavoriteIdGetWithHttpInfo(companyId, userId, favoriteId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdUsersUserIdFavoritesFavoriteIdGet");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling companiesCompanyIdUsersUserIdFavoritesFavoriteIdGet");
      }
      // verify the required parameter 'favoriteId' is set
      if (favoriteId === undefined || favoriteId === null) {
        throw new Error("Missing the required parameter 'favoriteId' when calling companiesCompanyIdUsersUserIdFavoritesFavoriteIdGet");
      }

      let pathParams = {
        'company_id': companyId,
        'user_id': userId,
        'favorite_id': favoriteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdGet200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/users/{user_id}/favorites/{favorite_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get single favorite by ID
     * @param {String} companyId 
     * @param {String} userId 
     * @param {String} favoriteId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdGet200Response}
     */
    companiesCompanyIdUsersUserIdFavoritesFavoriteIdGet(companyId, userId, favoriteId) {
      return this.companiesCompanyIdUsersUserIdFavoritesFavoriteIdGetWithHttpInfo(companyId, userId, favoriteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing favorite by ID
     * @param {String} companyId 
     * @param {String} userId 
     * @param {String} favoriteId 
     * @param {module:model/Favorite} favorite 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdPatch200Response} and HTTP response
     */
    companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatchWithHttpInfo(companyId, userId, favoriteId, favorite) {
      let postBody = favorite;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatch");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatch");
      }
      // verify the required parameter 'favoriteId' is set
      if (favoriteId === undefined || favoriteId === null) {
        throw new Error("Missing the required parameter 'favoriteId' when calling companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatch");
      }
      // verify the required parameter 'favorite' is set
      if (favorite === undefined || favorite === null) {
        throw new Error("Missing the required parameter 'favorite' when calling companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatch");
      }

      let pathParams = {
        'company_id': companyId,
        'user_id': userId,
        'favorite_id': favoriteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdPatch200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/users/{user_id}/favorites/{favorite_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an existing favorite by ID
     * @param {String} companyId 
     * @param {String} userId 
     * @param {String} favoriteId 
     * @param {module:model/Favorite} favorite 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdPatch200Response}
     */
    companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatch(companyId, userId, favoriteId, favorite) {
      return this.companiesCompanyIdUsersUserIdFavoritesFavoriteIdPatchWithHttpInfo(companyId, userId, favoriteId, favorite)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of all favorites for a specific user
     * @param {String} companyId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdUsersUserIdFavoritesGet200Response} and HTTP response
     */
    companiesCompanyIdUsersUserIdFavoritesGetWithHttpInfo(companyId, userId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdUsersUserIdFavoritesGet");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling companiesCompanyIdUsersUserIdFavoritesGet");
      }

      let pathParams = {
        'company_id': companyId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdUsersUserIdFavoritesGet200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/users/{user_id}/favorites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a list of all favorites for a specific user
     * @param {String} companyId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdUsersUserIdFavoritesGet200Response}
     */
    companiesCompanyIdUsersUserIdFavoritesGet(companyId, userId) {
      return this.companiesCompanyIdUsersUserIdFavoritesGetWithHttpInfo(companyId, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * POST /companies/{company_id}/users/{user_id}/favorites
     * @param {String} companyId 
     * @param {String} userId 
     * @param {module:model/Favorite} favorite 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdUsersUserIdFavoritesPost200Response} and HTTP response
     */
    companiesCompanyIdUsersUserIdFavoritesPostWithHttpInfo(companyId, userId, favorite) {
      let postBody = favorite;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdUsersUserIdFavoritesPost");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling companiesCompanyIdUsersUserIdFavoritesPost");
      }
      // verify the required parameter 'favorite' is set
      if (favorite === undefined || favorite === null) {
        throw new Error("Missing the required parameter 'favorite' when calling companiesCompanyIdUsersUserIdFavoritesPost");
      }

      let pathParams = {
        'company_id': companyId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdUsersUserIdFavoritesPost200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/users/{user_id}/favorites', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * POST /companies/{company_id}/users/{user_id}/favorites
     * @param {String} companyId 
     * @param {String} userId 
     * @param {module:model/Favorite} favorite 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdUsersUserIdFavoritesPost200Response}
     */
    companiesCompanyIdUsersUserIdFavoritesPost(companyId, userId, favorite) {
      return this.companiesCompanyIdUsersUserIdFavoritesPostWithHttpInfo(companyId, userId, favorite)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all favorites for the specified user that don't have a category
     * @param {String} companyId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdUsersUserIdFavoritesGet200Response} and HTTP response
     */
    companiesCompanyIdUsersUserIdFavoritesUncategorizedGetWithHttpInfo(companyId, userId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdUsersUserIdFavoritesUncategorizedGet");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling companiesCompanyIdUsersUserIdFavoritesUncategorizedGet");
      }

      let pathParams = {
        'company_id': companyId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdUsersUserIdFavoritesGet200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/users/{user_id}/favorites/uncategorized', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all favorites for the specified user that don't have a category
     * @param {String} companyId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdUsersUserIdFavoritesGet200Response}
     */
    companiesCompanyIdUsersUserIdFavoritesUncategorizedGet(companyId, userId) {
      return this.companiesCompanyIdUsersUserIdFavoritesUncategorizedGetWithHttpInfo(companyId, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
