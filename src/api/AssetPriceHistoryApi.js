/**
 * Spartera API Documentation
 * Auto-generated API documentation for REST services of the Spartera platform
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@spartera.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineObject2 from '../model/InlineObject2';
import InlineObject3 from '../model/InlineObject3';

/**
* AssetPriceHistory service.
* @module api/AssetPriceHistoryApi
* @version 0.0.0
*/
export default class AssetPriceHistoryApi {

    /**
    * Constructs a new AssetPriceHistoryApi. 
    * @alias module:api/AssetPriceHistoryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get the currently active price for an asset
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdPricesActiveGetWithHttpInfo(companyId, assetId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdPricesActiveGet");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdPricesActiveGet");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}/prices/active', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the currently active price for an asset
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdAssetsAssetIdPricesActiveGet(companyId, assetId) {
      return this.companiesCompanyIdAssetsAssetIdPricesActiveGetWithHttpInfo(companyId, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete single price history record by ID
     * @param {String} companyId 
     * @param {String} assetId 
     * @param {String} aphId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdPricesAphIdDeleteWithHttpInfo(companyId, assetId, aphId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdPricesAphIdDelete");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdPricesAphIdDelete");
      }
      // verify the required parameter 'aphId' is set
      if (aphId === undefined || aphId === null) {
        throw new Error("Missing the required parameter 'aphId' when calling companiesCompanyIdAssetsAssetIdPricesAphIdDelete");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId,
        'aph_id': aphId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}/prices/{aph_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete single price history record by ID
     * @param {String} companyId 
     * @param {String} assetId 
     * @param {String} aphId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdAssetsAssetIdPricesAphIdDelete(companyId, assetId, aphId) {
      return this.companiesCompanyIdAssetsAssetIdPricesAphIdDeleteWithHttpInfo(companyId, assetId, aphId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get single price history record by ID
     * @param {String} companyId 
     * @param {String} assetId 
     * @param {String} aphId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdPricesAphIdGetWithHttpInfo(companyId, assetId, aphId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdPricesAphIdGet");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdPricesAphIdGet");
      }
      // verify the required parameter 'aphId' is set
      if (aphId === undefined || aphId === null) {
        throw new Error("Missing the required parameter 'aphId' when calling companiesCompanyIdAssetsAssetIdPricesAphIdGet");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId,
        'aph_id': aphId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}/prices/{aph_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get single price history record by ID
     * @param {String} companyId 
     * @param {String} assetId 
     * @param {String} aphId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdAssetsAssetIdPricesAphIdGet(companyId, assetId, aphId) {
      return this.companiesCompanyIdAssetsAssetIdPricesAphIdGetWithHttpInfo(companyId, assetId, aphId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing price history record by ID
     * @param {String} companyId 
     * @param {String} assetId 
     * @param {String} aphId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdPricesAphIdPatchWithHttpInfo(companyId, assetId, aphId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdPricesAphIdPatch");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdPricesAphIdPatch");
      }
      // verify the required parameter 'aphId' is set
      if (aphId === undefined || aphId === null) {
        throw new Error("Missing the required parameter 'aphId' when calling companiesCompanyIdAssetsAssetIdPricesAphIdPatch");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId,
        'aph_id': aphId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}/prices/{aph_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an existing price history record by ID
     * @param {String} companyId 
     * @param {String} assetId 
     * @param {String} aphId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdAssetsAssetIdPricesAphIdPatch(companyId, assetId, aphId) {
      return this.companiesCompanyIdAssetsAssetIdPricesAphIdPatchWithHttpInfo(companyId, assetId, aphId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Calculate the credit equivalent for a given USD price without saving
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdPricesCalculateCreditsPostWithHttpInfo(companyId, assetId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdPricesCalculateCreditsPost");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdPricesCalculateCreditsPost");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}/prices/calculate_credits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Calculate the credit equivalent for a given USD price without saving
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdAssetsAssetIdPricesCalculateCreditsPost(companyId, assetId) {
      return this.companiesCompanyIdAssetsAssetIdPricesCalculateCreditsPostWithHttpInfo(companyId, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Apply a discount to the active price for an asset
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdPricesDiscountPostWithHttpInfo(companyId, assetId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdPricesDiscountPost");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdPricesDiscountPost");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}/prices/discount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Apply a discount to the active price for an asset
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdAssetsAssetIdPricesDiscountPost(companyId, assetId) {
      return this.companiesCompanyIdAssetsAssetIdPricesDiscountPostWithHttpInfo(companyId, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all price history records for a specific asset
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdPricesGetWithHttpInfo(companyId, assetId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdPricesGet");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdPricesGet");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}/prices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all price history records for a specific asset
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdAssetsAssetIdPricesGet(companyId, assetId) {
      return this.companiesCompanyIdAssetsAssetIdPricesGetWithHttpInfo(companyId, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new price history record for an asset
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdPricesPostWithHttpInfo(companyId, assetId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdPricesPost");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdPricesPost");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}/prices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new price history record for an asset
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdAssetsAssetIdPricesPost(companyId, assetId) {
      return this.companiesCompanyIdAssetsAssetIdPricesPostWithHttpInfo(companyId, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
