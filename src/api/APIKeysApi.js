/**
 * Spartera API Documentation
 * Auto-generated API documentation for REST services of the Spartera platform
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@spartera.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineObject2 from '../model/InlineObject2';
import InlineObject3 from '../model/InlineObject3';

/**
* APIKeys service.
* @module api/APIKeysApi
* @version 0.0.0
*/
export default class APIKeysApi {

    /**
    * Constructs a new APIKeysApi. 
    * @alias module:api/APIKeysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get single API key by ID
     * @param {String} companyId 
     * @param {String} apiKeyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdApiKeysApiKeyIdGetWithHttpInfo(companyId, apiKeyId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdApiKeysApiKeyIdGet");
      }
      // verify the required parameter 'apiKeyId' is set
      if (apiKeyId === undefined || apiKeyId === null) {
        throw new Error("Missing the required parameter 'apiKeyId' when calling companiesCompanyIdApiKeysApiKeyIdGet");
      }

      let pathParams = {
        'company_id': companyId,
        'api_key_id': apiKeyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/api-keys/{api_key_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get single API key by ID
     * @param {String} companyId 
     * @param {String} apiKeyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdApiKeysApiKeyIdGet(companyId, apiKeyId) {
      return this.companiesCompanyIdApiKeysApiKeyIdGetWithHttpInfo(companyId, apiKeyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing API key by ID
     * @param {String} companyId 
     * @param {String} apiKeyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdApiKeysApiKeyIdPatchWithHttpInfo(companyId, apiKeyId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdApiKeysApiKeyIdPatch");
      }
      // verify the required parameter 'apiKeyId' is set
      if (apiKeyId === undefined || apiKeyId === null) {
        throw new Error("Missing the required parameter 'apiKeyId' when calling companiesCompanyIdApiKeysApiKeyIdPatch");
      }

      let pathParams = {
        'company_id': companyId,
        'api_key_id': apiKeyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/api-keys/{api_key_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an existing API key by ID
     * @param {String} companyId 
     * @param {String} apiKeyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdApiKeysApiKeyIdPatch(companyId, apiKeyId) {
      return this.companiesCompanyIdApiKeysApiKeyIdPatchWithHttpInfo(companyId, apiKeyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all API keys
     * @param {String} companyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdApiKeysGetWithHttpInfo(companyId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdApiKeysGet");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/api-keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all API keys
     * @param {String} companyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdApiKeysGet(companyId) {
      return this.companiesCompanyIdApiKeysGetWithHttpInfo(companyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create single API key
     * @param {String} companyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdApiKeysPostWithHttpInfo(companyId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdApiKeysPost");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/api-keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create single API key
     * @param {String} companyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdApiKeysPost(companyId) {
      return this.companiesCompanyIdApiKeysPostWithHttpInfo(companyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete single API key by token
     * @param {String} companyId 
     * @param {String} token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdApiKeysTokenDeleteWithHttpInfo(companyId, token) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdApiKeysTokenDelete");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling companiesCompanyIdApiKeysTokenDelete");
      }

      let pathParams = {
        'company_id': companyId,
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/api-keys/{token}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete single API key by token
     * @param {String} companyId 
     * @param {String} token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdApiKeysTokenDelete(companyId, token) {
      return this.companiesCompanyIdApiKeysTokenDeleteWithHttpInfo(companyId, token)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
