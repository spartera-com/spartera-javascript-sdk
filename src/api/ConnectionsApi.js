/**
 * Spartera API Documentation
 * Auto-generated API documentation for REST services of the Spartera platform
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@spartera.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CompaniesCompanyIdConnectionsConnectionIdDelete200Response from '../model/CompaniesCompanyIdConnectionsConnectionIdDelete200Response';
import CompaniesCompanyIdConnectionsConnectionIdGet200Response from '../model/CompaniesCompanyIdConnectionsConnectionIdGet200Response';
import CompaniesCompanyIdConnectionsConnectionIdPatch200Response from '../model/CompaniesCompanyIdConnectionsConnectionIdPatch200Response';
import CompaniesCompanyIdConnectionsGet200Response from '../model/CompaniesCompanyIdConnectionsGet200Response';
import CompaniesCompanyIdConnectionsPost200Response from '../model/CompaniesCompanyIdConnectionsPost200Response';
import Connection from '../model/Connection';
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineObject2 from '../model/InlineObject2';
import InlineObject3 from '../model/InlineObject3';

/**
* Connections service.
* @module api/ConnectionsApi
* @version 0.0.0
*/
export default class ConnectionsApi {

    /**
    * Constructs a new ConnectionsApi. 
    * @alias module:api/ConnectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete single connection by ID
     * @param {String} companyId 
     * @param {String} connectionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdConnectionsConnectionIdDelete200Response} and HTTP response
     */
    companiesCompanyIdConnectionsConnectionIdDeleteWithHttpInfo(companyId, connectionId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdConnectionsConnectionIdDelete");
      }
      // verify the required parameter 'connectionId' is set
      if (connectionId === undefined || connectionId === null) {
        throw new Error("Missing the required parameter 'connectionId' when calling companiesCompanyIdConnectionsConnectionIdDelete");
      }

      let pathParams = {
        'company_id': companyId,
        'connection_id': connectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdConnectionsConnectionIdDelete200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/connections/{connection_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete single connection by ID
     * @param {String} companyId 
     * @param {String} connectionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdConnectionsConnectionIdDelete200Response}
     */
    companiesCompanyIdConnectionsConnectionIdDelete(companyId, connectionId) {
      return this.companiesCompanyIdConnectionsConnectionIdDeleteWithHttpInfo(companyId, connectionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get single connection by ID
     * @param {String} companyId 
     * @param {String} connectionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdConnectionsConnectionIdGet200Response} and HTTP response
     */
    companiesCompanyIdConnectionsConnectionIdGetWithHttpInfo(companyId, connectionId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdConnectionsConnectionIdGet");
      }
      // verify the required parameter 'connectionId' is set
      if (connectionId === undefined || connectionId === null) {
        throw new Error("Missing the required parameter 'connectionId' when calling companiesCompanyIdConnectionsConnectionIdGet");
      }

      let pathParams = {
        'company_id': companyId,
        'connection_id': connectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdConnectionsConnectionIdGet200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/connections/{connection_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get single connection by ID
     * @param {String} companyId 
     * @param {String} connectionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdConnectionsConnectionIdGet200Response}
     */
    companiesCompanyIdConnectionsConnectionIdGet(companyId, connectionId) {
      return this.companiesCompanyIdConnectionsConnectionIdGetWithHttpInfo(companyId, connectionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve the information schema for the specified connection
     * @param {String} companyId 
     * @param {String} connectionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdConnectionsGet200Response} and HTTP response
     */
    companiesCompanyIdConnectionsConnectionIdInfoschemaGetWithHttpInfo(companyId, connectionId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdConnectionsConnectionIdInfoschemaGet");
      }
      // verify the required parameter 'connectionId' is set
      if (connectionId === undefined || connectionId === null) {
        throw new Error("Missing the required parameter 'connectionId' when calling companiesCompanyIdConnectionsConnectionIdInfoschemaGet");
      }

      let pathParams = {
        'company_id': companyId,
        'connection_id': connectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdConnectionsGet200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/connections/{connection_id}/infoschema', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve the information schema for the specified connection
     * @param {String} companyId 
     * @param {String} connectionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdConnectionsGet200Response}
     */
    companiesCompanyIdConnectionsConnectionIdInfoschemaGet(companyId, connectionId) {
      return this.companiesCompanyIdConnectionsConnectionIdInfoschemaGetWithHttpInfo(companyId, connectionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing connection by ID
     * @param {String} companyId 
     * @param {String} connectionId 
     * @param {module:model/Connection} connection 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdConnectionsConnectionIdPatch200Response} and HTTP response
     */
    companiesCompanyIdConnectionsConnectionIdPatchWithHttpInfo(companyId, connectionId, connection) {
      let postBody = connection;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdConnectionsConnectionIdPatch");
      }
      // verify the required parameter 'connectionId' is set
      if (connectionId === undefined || connectionId === null) {
        throw new Error("Missing the required parameter 'connectionId' when calling companiesCompanyIdConnectionsConnectionIdPatch");
      }
      // verify the required parameter 'connection' is set
      if (connection === undefined || connection === null) {
        throw new Error("Missing the required parameter 'connection' when calling companiesCompanyIdConnectionsConnectionIdPatch");
      }

      let pathParams = {
        'company_id': companyId,
        'connection_id': connectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdConnectionsConnectionIdPatch200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/connections/{connection_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an existing connection by ID
     * @param {String} companyId 
     * @param {String} connectionId 
     * @param {module:model/Connection} connection 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdConnectionsConnectionIdPatch200Response}
     */
    companiesCompanyIdConnectionsConnectionIdPatch(companyId, connectionId, connection) {
      return this.companiesCompanyIdConnectionsConnectionIdPatchWithHttpInfo(companyId, connectionId, connection)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Test the specified connection
     * @param {String} companyId 
     * @param {String} connectionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdConnectionsGet200Response} and HTTP response
     */
    companiesCompanyIdConnectionsConnectionIdTestGetWithHttpInfo(companyId, connectionId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdConnectionsConnectionIdTestGet");
      }
      // verify the required parameter 'connectionId' is set
      if (connectionId === undefined || connectionId === null) {
        throw new Error("Missing the required parameter 'connectionId' when calling companiesCompanyIdConnectionsConnectionIdTestGet");
      }

      let pathParams = {
        'company_id': companyId,
        'connection_id': connectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdConnectionsGet200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/connections/{connection_id}/test', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Test the specified connection
     * @param {String} companyId 
     * @param {String} connectionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdConnectionsGet200Response}
     */
    companiesCompanyIdConnectionsConnectionIdTestGet(companyId, connectionId) {
      return this.companiesCompanyIdConnectionsConnectionIdTestGetWithHttpInfo(companyId, connectionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all connections for a specific company
     * @param {String} companyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdConnectionsGet200Response} and HTTP response
     */
    companiesCompanyIdConnectionsGetWithHttpInfo(companyId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdConnectionsGet");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdConnectionsGet200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/connections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all connections for a specific company
     * @param {String} companyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdConnectionsGet200Response}
     */
    companiesCompanyIdConnectionsGet(companyId) {
      return this.companiesCompanyIdConnectionsGetWithHttpInfo(companyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new connection by ID
     * @param {String} companyId 
     * @param {module:model/Connection} connection 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdConnectionsPost200Response} and HTTP response
     */
    companiesCompanyIdConnectionsPostWithHttpInfo(companyId, connection) {
      let postBody = connection;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdConnectionsPost");
      }
      // verify the required parameter 'connection' is set
      if (connection === undefined || connection === null) {
        throw new Error("Missing the required parameter 'connection' when calling companiesCompanyIdConnectionsPost");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdConnectionsPost200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/connections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new connection by ID
     * @param {String} companyId 
     * @param {module:model/Connection} connection 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdConnectionsPost200Response}
     */
    companiesCompanyIdConnectionsPost(companyId, connection) {
      return this.companiesCompanyIdConnectionsPostWithHttpInfo(companyId, connection)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
