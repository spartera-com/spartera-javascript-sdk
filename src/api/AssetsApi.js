/**
 * Spartera API Documentation
 * Auto-generated API documentation for REST services of the Spartera platform
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@spartera.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Asset from '../model/Asset';
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineObject2 from '../model/InlineObject2';
import InlineObject3 from '../model/InlineObject3';

/**
* Assets service.
* @module api/AssetsApi
* @version 0.0.0
*/
export default class AssetsApi {

    /**
    * Constructs a new AssetsApi. 
    * @alias module:api/AssetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Process assets route that handles both owned and purchased assets.             Minimal route function that passes all logic to crudder.process_asset              Args:                 asset_path: The path after /analyze/ containing asset information                 company_handle: The subdomain from Flask's routing (if available)
     * @param {String} companyHandle 
     * @param {String} assetSlug 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    analyzeCompanyHandleAssetsAssetSlugGetWithHttpInfo(companyHandle, assetSlug) {
      let postBody = null;
      // verify the required parameter 'companyHandle' is set
      if (companyHandle === undefined || companyHandle === null) {
        throw new Error("Missing the required parameter 'companyHandle' when calling analyzeCompanyHandleAssetsAssetSlugGet");
      }
      // verify the required parameter 'assetSlug' is set
      if (assetSlug === undefined || assetSlug === null) {
        throw new Error("Missing the required parameter 'assetSlug' when calling analyzeCompanyHandleAssetsAssetSlugGet");
      }

      let pathParams = {
        'company_handle': companyHandle,
        'asset_slug': assetSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/analyze/{company_handle}/assets/{asset_slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Process assets route that handles both owned and purchased assets.             Minimal route function that passes all logic to crudder.process_asset              Args:                 asset_path: The path after /analyze/ containing asset information                 company_handle: The subdomain from Flask's routing (if available)
     * @param {String} companyHandle 
     * @param {String} assetSlug 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    analyzeCompanyHandleAssetsAssetSlugGet(companyHandle, assetSlug) {
      return this.analyzeCompanyHandleAssetsAssetSlugGetWithHttpInfo(companyHandle, assetSlug)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete single asset by ID
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdDeleteWithHttpInfo(companyId, assetId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdDelete");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdDelete");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete single asset by ID
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdAssetsAssetIdDelete(companyId, assetId) {
      return this.companiesCompanyIdAssetsAssetIdDeleteWithHttpInfo(companyId, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get single asset by ID
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdGetWithHttpInfo(companyId, assetId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdGet");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdGet");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get single asset by ID
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdAssetsAssetIdGet(companyId, assetId) {
      return this.companiesCompanyIdAssetsAssetIdGetWithHttpInfo(companyId, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the information schema for a specific asset's table
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdInfoschemaGetWithHttpInfo(companyId, assetId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdInfoschemaGet");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdInfoschemaGet");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}/infoschema', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the information schema for a specific asset's table
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdAssetsAssetIdInfoschemaGet(companyId, assetId) {
      return this.companiesCompanyIdAssetsAssetIdInfoschemaGetWithHttpInfo(companyId, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the information schema for a specific asset and save it to the asset's asset_schema field
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdInfoschemaSaveGetWithHttpInfo(companyId, assetId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdInfoschemaSaveGet");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdInfoschemaSaveGet");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}/infoschema/save', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the information schema for a specific asset and save it to the asset's asset_schema field
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdAssetsAssetIdInfoschemaSaveGet(companyId, assetId) {
      return this.companiesCompanyIdAssetsAssetIdInfoschemaSaveGetWithHttpInfo(companyId, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing asset by ID
     * @param {String} companyId 
     * @param {String} assetId 
     * @param {module:model/Asset} asset 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdPatchWithHttpInfo(companyId, assetId, asset) {
      let postBody = asset;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdPatch");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdPatch");
      }
      // verify the required parameter 'asset' is set
      if (asset === undefined || asset === null) {
        throw new Error("Missing the required parameter 'asset' when calling companiesCompanyIdAssetsAssetIdPatch");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an existing asset by ID
     * @param {String} companyId 
     * @param {String} assetId 
     * @param {module:model/Asset} asset 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdAssetsAssetIdPatch(companyId, assetId, asset) {
      return this.companiesCompanyIdAssetsAssetIdPatchWithHttpInfo(companyId, assetId, asset)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get AI-predicted pricing for a specific asset
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdPredictedPriceGetWithHttpInfo(companyId, assetId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdPredictedPriceGet");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdPredictedPriceGet");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}/predicted_price', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get AI-predicted pricing for a specific asset
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdAssetsAssetIdPredictedPriceGet(companyId, assetId) {
      return this.companiesCompanyIdAssetsAssetIdPredictedPriceGetWithHttpInfo(companyId, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get detailed explanation of how asset recommendations are calculated for debugging purposes.
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdRecommendationsExplainGetWithHttpInfo(companyId, assetId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdRecommendationsExplainGet");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdRecommendationsExplainGet");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}/recommendations/explain', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get detailed explanation of how asset recommendations are calculated for debugging purposes.
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdAssetsAssetIdRecommendationsExplainGet(companyId, assetId) {
      return this.companiesCompanyIdAssetsAssetIdRecommendationsExplainGetWithHttpInfo(companyId, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get asset recommendations for a specific asset using heuristic waterfall matching     Returns list of similar assets based on industry, company, connection, tags, etc.      Query Parameters:     - limit: Number of recommendations to return (default: 12, max: 50)     - min_score: Minimum similarity score threshold (default: 0.1)     - include_details: Include component similarity scores (default: false)
     * @param {String} companyId 
     * @param {String} assetId 
     * @param {Object} opts Optional parameters
     * @param {String} [limit] 
     * @param {String} [minScore] 
     * @param {String} [includeDetails] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdRecommendationsGetWithHttpInfo(companyId, assetId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdRecommendationsGet");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdRecommendationsGet");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId
      };
      let queryParams = {
        'limit': opts['limit'],
        'min_score': opts['minScore'],
        'include_details': opts['includeDetails']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}/recommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get asset recommendations for a specific asset using heuristic waterfall matching     Returns list of similar assets based on industry, company, connection, tags, etc.      Query Parameters:     - limit: Number of recommendations to return (default: 12, max: 50)     - min_score: Minimum similarity score threshold (default: 0.1)     - include_details: Include component similarity scores (default: false)
     * @param {String} companyId 
     * @param {String} assetId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.limit 
     * @param {String} opts.minScore 
     * @param {String} opts.includeDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdAssetsAssetIdRecommendationsGet(companyId, assetId, opts) {
      return this.companiesCompanyIdAssetsAssetIdRecommendationsGetWithHttpInfo(companyId, assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get statistics for a specific asset (public endpoint)
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdStatisticsGetWithHttpInfo(companyId, assetId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdStatisticsGet");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdStatisticsGet");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get statistics for a specific asset (public endpoint)
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdAssetsAssetIdStatisticsGet(companyId, assetId) {
      return this.companiesCompanyIdAssetsAssetIdStatisticsGetWithHttpInfo(companyId, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Test out an Asset (on a subset of data)
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdTestGetWithHttpInfo(companyId, assetId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdTestGet");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdTestGet");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}/test', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Test out an Asset (on a subset of data)
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdAssetsAssetIdTestGet(companyId, assetId) {
      return this.companiesCompanyIdAssetsAssetIdTestGetWithHttpInfo(companyId, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all assets for a specific company
     * @param {String} companyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdAssetsGetWithHttpInfo(companyId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsGet");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all assets for a specific company
     * @param {String} companyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdAssetsGet(companyId) {
      return this.companiesCompanyIdAssetsGetWithHttpInfo(companyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new asset
     * @param {String} companyId 
     * @param {module:model/Asset} asset 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdAssetsPostWithHttpInfo(companyId, asset) {
      let postBody = asset;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsPost");
      }
      // verify the required parameter 'asset' is set
      if (asset === undefined || asset === null) {
        throw new Error("Missing the required parameter 'asset' when calling companiesCompanyIdAssetsPost");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new asset
     * @param {String} companyId 
     * @param {module:model/Asset} asset 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdAssetsPost(companyId, asset) {
      return this.companiesCompanyIdAssetsPostWithHttpInfo(companyId, asset)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get recommendations for multiple assets in a single request. Useful for pre-loading recommendations.
     * @param {String} companyId 
     * @param {module:model/Asset} asset 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdAssetsRecommendationsBulkPostWithHttpInfo(companyId, asset) {
      let postBody = asset;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsRecommendationsBulkPost");
      }
      // verify the required parameter 'asset' is set
      if (asset === undefined || asset === null) {
        throw new Error("Missing the required parameter 'asset' when calling companiesCompanyIdAssetsRecommendationsBulkPost");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/recommendations/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get recommendations for multiple assets in a single request. Useful for pre-loading recommendations.
     * @param {String} companyId 
     * @param {module:model/Asset} asset 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdAssetsRecommendationsBulkPost(companyId, asset) {
      return this.companiesCompanyIdAssetsRecommendationsBulkPostWithHttpInfo(companyId, asset)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Health check for the recommendations system with sample data and performance metrics.
     * @param {String} companyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdAssetsRecommendationsHealthGetWithHttpInfo(companyId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsRecommendationsHealthGet");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/recommendations/health', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Health check for the recommendations system with sample data and performance metrics.
     * @param {String} companyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdAssetsRecommendationsHealthGet(companyId) {
      return this.companiesCompanyIdAssetsRecommendationsHealthGetWithHttpInfo(companyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get statistics for all assets the user has access to
     * @param {String} companyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdAssetsStatisticsGetWithHttpInfo(companyId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsStatisticsGet");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get statistics for all assets the user has access to
     * @param {String} companyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdAssetsStatisticsGet(companyId) {
      return this.companiesCompanyIdAssetsStatisticsGetWithHttpInfo(companyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
