/**
 * Spartera API Documentation
 * Auto-generated API documentation for REST services of the Spartera platform
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@spartera.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Asset from '../model/Asset';
import CompaniesCompanyIdAssetsAssetIdDelete200Response from '../model/CompaniesCompanyIdAssetsAssetIdDelete200Response';
import CompaniesCompanyIdAssetsAssetIdGet200Response from '../model/CompaniesCompanyIdAssetsAssetIdGet200Response';
import CompaniesCompanyIdAssetsAssetIdPatch200Response from '../model/CompaniesCompanyIdAssetsAssetIdPatch200Response';
import CompaniesCompanyIdAssetsGet200Response from '../model/CompaniesCompanyIdAssetsGet200Response';
import CompaniesCompanyIdAssetsPost200Response from '../model/CompaniesCompanyIdAssetsPost200Response';
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineObject2 from '../model/InlineObject2';
import InlineObject3 from '../model/InlineObject3';

/**
* Assets service.
* @module api/AssetsApi
* @version 0.0.0
*/
export default class AssetsApi {

    /**
    * Constructs a new AssetsApi. 
    * @alias module:api/AssetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Process (analyze) an asset. Attempt to process an analytic on a backend warehouse/AI model.
     * @param {String} companyHandle 
     * @param {String} assetSlug 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdAssetsAssetIdGet200Response} and HTTP response
     */
    analyzeCompanyHandleAssetsAssetSlugGetWithHttpInfo(companyHandle, assetSlug) {
      let postBody = null;
      // verify the required parameter 'companyHandle' is set
      if (companyHandle === undefined || companyHandle === null) {
        throw new Error("Missing the required parameter 'companyHandle' when calling analyzeCompanyHandleAssetsAssetSlugGet");
      }
      // verify the required parameter 'assetSlug' is set
      if (assetSlug === undefined || assetSlug === null) {
        throw new Error("Missing the required parameter 'assetSlug' when calling analyzeCompanyHandleAssetsAssetSlugGet");
      }

      let pathParams = {
        'company_handle': companyHandle,
        'asset_slug': assetSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdAssetsAssetIdGet200Response;
      return this.apiClient.callApi(
        '/analyze/{company_handle}/assets/{asset_slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Process (analyze) an asset. Attempt to process an analytic on a backend warehouse/AI model.
     * @param {String} companyHandle 
     * @param {String} assetSlug 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdAssetsAssetIdGet200Response}
     */
    analyzeCompanyHandleAssetsAssetSlugGet(companyHandle, assetSlug) {
      return this.analyzeCompanyHandleAssetsAssetSlugGetWithHttpInfo(companyHandle, assetSlug)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete single asset by ID
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdAssetsAssetIdDelete200Response} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdDeleteWithHttpInfo(companyId, assetId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdDelete");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdDelete");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdAssetsAssetIdDelete200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete single asset by ID
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdAssetsAssetIdDelete200Response}
     */
    companiesCompanyIdAssetsAssetIdDelete(companyId, assetId) {
      return this.companiesCompanyIdAssetsAssetIdDeleteWithHttpInfo(companyId, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get single asset by ID
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdAssetsAssetIdGet200Response} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdGetWithHttpInfo(companyId, assetId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdGet");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdGet");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdAssetsAssetIdGet200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get single asset by ID
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdAssetsAssetIdGet200Response}
     */
    companiesCompanyIdAssetsAssetIdGet(companyId, assetId) {
      return this.companiesCompanyIdAssetsAssetIdGetWithHttpInfo(companyId, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the information schema for a specific asset's table
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdAssetsGet200Response} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdInfoschemaGetWithHttpInfo(companyId, assetId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdInfoschemaGet");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdInfoschemaGet");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdAssetsGet200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}/infoschema', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the information schema for a specific asset's table
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdAssetsGet200Response}
     */
    companiesCompanyIdAssetsAssetIdInfoschemaGet(companyId, assetId) {
      return this.companiesCompanyIdAssetsAssetIdInfoschemaGetWithHttpInfo(companyId, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve and save an asset's information schema
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdAssetsGet200Response} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdInfoschemaSaveGetWithHttpInfo(companyId, assetId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdInfoschemaSaveGet");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdInfoschemaSaveGet");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdAssetsGet200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}/infoschema/save', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve and save an asset's information schema
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdAssetsGet200Response}
     */
    companiesCompanyIdAssetsAssetIdInfoschemaSaveGet(companyId, assetId) {
      return this.companiesCompanyIdAssetsAssetIdInfoschemaSaveGetWithHttpInfo(companyId, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing asset by ID
     * @param {String} companyId 
     * @param {String} assetId 
     * @param {module:model/Asset} asset 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdAssetsAssetIdPatch200Response} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdPatchWithHttpInfo(companyId, assetId, asset) {
      let postBody = asset;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdPatch");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdPatch");
      }
      // verify the required parameter 'asset' is set
      if (asset === undefined || asset === null) {
        throw new Error("Missing the required parameter 'asset' when calling companiesCompanyIdAssetsAssetIdPatch");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdAssetsAssetIdPatch200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an existing asset by ID
     * @param {String} companyId 
     * @param {String} assetId 
     * @param {module:model/Asset} asset 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdAssetsAssetIdPatch200Response}
     */
    companiesCompanyIdAssetsAssetIdPatch(companyId, assetId, asset) {
      return this.companiesCompanyIdAssetsAssetIdPatchWithHttpInfo(companyId, assetId, asset)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get AI-predicted pricing for a specific asset
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdAssetsGet200Response} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdPredictedPriceGetWithHttpInfo(companyId, assetId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdPredictedPriceGet");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdPredictedPriceGet");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdAssetsGet200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}/predicted_price', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get AI-predicted pricing for a specific asset
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdAssetsGet200Response}
     */
    companiesCompanyIdAssetsAssetIdPredictedPriceGet(companyId, assetId) {
      return this.companiesCompanyIdAssetsAssetIdPredictedPriceGetWithHttpInfo(companyId, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get statistics for a specific asset (public endpoint)
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdAssetsGet200Response} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdStatisticsGetWithHttpInfo(companyId, assetId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdStatisticsGet");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdStatisticsGet");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdAssetsGet200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get statistics for a specific asset (public endpoint)
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdAssetsGet200Response}
     */
    companiesCompanyIdAssetsAssetIdStatisticsGet(companyId, assetId) {
      return this.companiesCompanyIdAssetsAssetIdStatisticsGetWithHttpInfo(companyId, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Test out an Asset (on a subset of data)
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdAssetsGet200Response} and HTTP response
     */
    companiesCompanyIdAssetsAssetIdTestGetWithHttpInfo(companyId, assetId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsAssetIdTestGet");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdAssetsAssetIdTestGet");
      }

      let pathParams = {
        'company_id': companyId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdAssetsGet200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/{asset_id}/test', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Test out an Asset (on a subset of data)
     * @param {String} companyId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdAssetsGet200Response}
     */
    companiesCompanyIdAssetsAssetIdTestGet(companyId, assetId) {
      return this.companiesCompanyIdAssetsAssetIdTestGetWithHttpInfo(companyId, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all assets for a specific company
     * @param {String} companyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdAssetsGet200Response} and HTTP response
     */
    companiesCompanyIdAssetsGetWithHttpInfo(companyId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsGet");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdAssetsGet200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all assets for a specific company
     * @param {String} companyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdAssetsGet200Response}
     */
    companiesCompanyIdAssetsGet(companyId) {
      return this.companiesCompanyIdAssetsGetWithHttpInfo(companyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new asset
     * @param {String} companyId 
     * @param {module:model/Asset} asset 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdAssetsPost200Response} and HTTP response
     */
    companiesCompanyIdAssetsPostWithHttpInfo(companyId, asset) {
      let postBody = asset;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsPost");
      }
      // verify the required parameter 'asset' is set
      if (asset === undefined || asset === null) {
        throw new Error("Missing the required parameter 'asset' when calling companiesCompanyIdAssetsPost");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdAssetsPost200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new asset
     * @param {String} companyId 
     * @param {module:model/Asset} asset 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdAssetsPost200Response}
     */
    companiesCompanyIdAssetsPost(companyId, asset) {
      return this.companiesCompanyIdAssetsPostWithHttpInfo(companyId, asset)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get statistics for all assets the user has access to
     * @param {String} companyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesCompanyIdAssetsGet200Response} and HTTP response
     */
    companiesCompanyIdAssetsStatisticsGetWithHttpInfo(companyId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdAssetsStatisticsGet");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompaniesCompanyIdAssetsGet200Response;
      return this.apiClient.callApi(
        '/companies/{company_id}/assets/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get statistics for all assets the user has access to
     * @param {String} companyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesCompanyIdAssetsGet200Response}
     */
    companiesCompanyIdAssetsStatisticsGet(companyId) {
      return this.companiesCompanyIdAssetsStatisticsGetWithHttpInfo(companyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
