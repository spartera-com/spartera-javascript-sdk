/**
 * Spartera API Documentation
 * Auto-generated API documentation for REST services of the Spartera platform
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@spartera.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Alert from '../model/Alert';
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineObject2 from '../model/InlineObject2';
import InlineObject3 from '../model/InlineObject3';

/**
* Alerts service.
* @module api/AlertsApi
* @version 0.0.0
*/
export default class AlertsApi {

    /**
    * Constructs a new AlertsApi. 
    * @alias module:api/AlertsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete single alert by ID
     * @param {String} companyId 
     * @param {String} userId 
     * @param {String} alertId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdUsersUserIdAlertsAlertIdDeleteWithHttpInfo(companyId, userId, alertId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdUsersUserIdAlertsAlertIdDelete");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling companiesCompanyIdUsersUserIdAlertsAlertIdDelete");
      }
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling companiesCompanyIdUsersUserIdAlertsAlertIdDelete");
      }

      let pathParams = {
        'company_id': companyId,
        'user_id': userId,
        'alert_id': alertId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/users/{user_id}/alerts/{alert_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete single alert by ID
     * @param {String} companyId 
     * @param {String} userId 
     * @param {String} alertId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdUsersUserIdAlertsAlertIdDelete(companyId, userId, alertId) {
      return this.companiesCompanyIdUsersUserIdAlertsAlertIdDeleteWithHttpInfo(companyId, userId, alertId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get single alert by ID
     * @param {String} companyId 
     * @param {String} userId 
     * @param {String} alertId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdUsersUserIdAlertsAlertIdGetWithHttpInfo(companyId, userId, alertId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdUsersUserIdAlertsAlertIdGet");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling companiesCompanyIdUsersUserIdAlertsAlertIdGet");
      }
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling companiesCompanyIdUsersUserIdAlertsAlertIdGet");
      }

      let pathParams = {
        'company_id': companyId,
        'user_id': userId,
        'alert_id': alertId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/users/{user_id}/alerts/{alert_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get single alert by ID
     * @param {String} companyId 
     * @param {String} userId 
     * @param {String} alertId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdUsersUserIdAlertsAlertIdGet(companyId, userId, alertId) {
      return this.companiesCompanyIdUsersUserIdAlertsAlertIdGetWithHttpInfo(companyId, userId, alertId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing alert by ID
     * @param {String} companyId 
     * @param {String} userId 
     * @param {String} alertId 
     * @param {module:model/Alert} alert 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdUsersUserIdAlertsAlertIdPatchWithHttpInfo(companyId, userId, alertId, alert) {
      let postBody = alert;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdUsersUserIdAlertsAlertIdPatch");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling companiesCompanyIdUsersUserIdAlertsAlertIdPatch");
      }
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling companiesCompanyIdUsersUserIdAlertsAlertIdPatch");
      }
      // verify the required parameter 'alert' is set
      if (alert === undefined || alert === null) {
        throw new Error("Missing the required parameter 'alert' when calling companiesCompanyIdUsersUserIdAlertsAlertIdPatch");
      }

      let pathParams = {
        'company_id': companyId,
        'user_id': userId,
        'alert_id': alertId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/users/{user_id}/alerts/{alert_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an existing alert by ID
     * @param {String} companyId 
     * @param {String} userId 
     * @param {String} alertId 
     * @param {module:model/Alert} alert 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdUsersUserIdAlertsAlertIdPatch(companyId, userId, alertId, alert) {
      return this.companiesCompanyIdUsersUserIdAlertsAlertIdPatchWithHttpInfo(companyId, userId, alertId, alert)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all alerts for a specific asset (from all users)     This would typically be restricted to asset owners or admins
     * @param {String} companyId 
     * @param {String} userId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdUsersUserIdAlertsAssetAssetIdAllGetWithHttpInfo(companyId, userId, assetId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdUsersUserIdAlertsAssetAssetIdAllGet");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling companiesCompanyIdUsersUserIdAlertsAssetAssetIdAllGet");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdUsersUserIdAlertsAssetAssetIdAllGet");
      }

      let pathParams = {
        'company_id': companyId,
        'user_id': userId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/users/{user_id}/alerts/asset/{asset_id}/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all alerts for a specific asset (from all users)     This would typically be restricted to asset owners or admins
     * @param {String} companyId 
     * @param {String} userId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdUsersUserIdAlertsAssetAssetIdAllGet(companyId, userId, assetId) {
      return this.companiesCompanyIdUsersUserIdAlertsAssetAssetIdAllGetWithHttpInfo(companyId, userId, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all alerts for a specific asset by the specified user     Useful for checking if user already has an alert set up for an asset
     * @param {String} companyId 
     * @param {String} userId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdUsersUserIdAlertsAssetAssetIdGetWithHttpInfo(companyId, userId, assetId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdUsersUserIdAlertsAssetAssetIdGet");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling companiesCompanyIdUsersUserIdAlertsAssetAssetIdGet");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling companiesCompanyIdUsersUserIdAlertsAssetAssetIdGet");
      }

      let pathParams = {
        'company_id': companyId,
        'user_id': userId,
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/users/{user_id}/alerts/asset/{asset_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all alerts for a specific asset by the specified user     Useful for checking if user already has an alert set up for an asset
     * @param {String} companyId 
     * @param {String} userId 
     * @param {String} assetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdUsersUserIdAlertsAssetAssetIdGet(companyId, userId, assetId) {
      return this.companiesCompanyIdUsersUserIdAlertsAssetAssetIdGetWithHttpInfo(companyId, userId, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of all alerts for a specific user
     * @param {String} companyId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdUsersUserIdAlertsGetWithHttpInfo(companyId, userId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdUsersUserIdAlertsGet");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling companiesCompanyIdUsersUserIdAlertsGet");
      }

      let pathParams = {
        'company_id': companyId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/users/{user_id}/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a list of all alerts for a specific user
     * @param {String} companyId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdUsersUserIdAlertsGet(companyId, userId) {
      return this.companiesCompanyIdUsersUserIdAlertsGetWithHttpInfo(companyId, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * POST /companies/{company_id}/users/{user_id}/alerts
     * @param {String} companyId 
     * @param {String} userId 
     * @param {module:model/Alert} alert 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    companiesCompanyIdUsersUserIdAlertsPostWithHttpInfo(companyId, userId, alert) {
      let postBody = alert;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesCompanyIdUsersUserIdAlertsPost");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling companiesCompanyIdUsersUserIdAlertsPost");
      }
      // verify the required parameter 'alert' is set
      if (alert === undefined || alert === null) {
        throw new Error("Missing the required parameter 'alert' when calling companiesCompanyIdUsersUserIdAlertsPost");
      }

      let pathParams = {
        'company_id': companyId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/companies/{company_id}/users/{user_id}/alerts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * POST /companies/{company_id}/users/{user_id}/alerts
     * @param {String} companyId 
     * @param {String} userId 
     * @param {module:model/Alert} alert 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    companiesCompanyIdUsersUserIdAlertsPost(companyId, userId, alert) {
      return this.companiesCompanyIdUsersUserIdAlertsPostWithHttpInfo(companyId, userId, alert)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
