/**
 * Spartera API Documentation
 * Auto-generated API documentation for REST services of the Spartera platform
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@spartera.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MeGet200ResponseApiKeyInfo from './MeGet200ResponseApiKeyInfo';
import MeGet200ResponseProfile from './MeGet200ResponseProfile';
import MeGet200ResponseTokenMetadata from './MeGet200ResponseTokenMetadata';

/**
 * The MeGet200Response model module.
 * @module model/MeGet200Response
 * @version 0.0.0
 */
class MeGet200Response {
    /**
     * Constructs a new <code>MeGet200Response</code>.
     * @alias module:model/MeGet200Response
     * @param userId {String} Firebase user ID
     * @param authMethod {module:model/MeGet200Response.AuthMethodEnum} Authentication method used
     * @param profile {module:model/MeGet200ResponseProfile} 
     * @param companyId {String} Company ID from authentication claims
     * @param roleId {Number} Role ID from authentication claims
     */
    constructor(userId, authMethod, profile, companyId, roleId) { 
        
        MeGet200Response.initialize(this, userId, authMethod, profile, companyId, roleId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, userId, authMethod, profile, companyId, roleId) { 
        obj['user_id'] = userId;
        obj['auth_method'] = authMethod;
        obj['profile'] = profile;
        obj['company_id'] = companyId;
        obj['role_id'] = roleId;
    }

    /**
     * Constructs a <code>MeGet200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MeGet200Response} obj Optional instance to populate.
     * @return {module:model/MeGet200Response} The populated <code>MeGet200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MeGet200Response();

            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('auth_method')) {
                obj['auth_method'] = ApiClient.convertToType(data['auth_method'], 'String');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('origin_domain')) {
                obj['origin_domain'] = ApiClient.convertToType(data['origin_domain'], 'String');
            }
            if (data.hasOwnProperty('profile')) {
                obj['profile'] = MeGet200ResponseProfile.constructFromObject(data['profile']);
            }
            if (data.hasOwnProperty('company_id')) {
                obj['company_id'] = ApiClient.convertToType(data['company_id'], 'String');
            }
            if (data.hasOwnProperty('role_id')) {
                obj['role_id'] = ApiClient.convertToType(data['role_id'], 'Number');
            }
            if (data.hasOwnProperty('token_metadata')) {
                obj['token_metadata'] = MeGet200ResponseTokenMetadata.constructFromObject(data['token_metadata']);
            }
            if (data.hasOwnProperty('api_key_info')) {
                obj['api_key_info'] = MeGet200ResponseApiKeyInfo.constructFromObject(data['api_key_info']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MeGet200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MeGet200Response</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MeGet200Response.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['auth_method'] && !(typeof data['auth_method'] === 'string' || data['auth_method'] instanceof String)) {
            throw new Error("Expected the field `auth_method` to be a primitive type in the JSON string but got " + data['auth_method']);
        }
        // ensure the json data is a string
        if (data['platform'] && !(typeof data['platform'] === 'string' || data['platform'] instanceof String)) {
            throw new Error("Expected the field `platform` to be a primitive type in the JSON string but got " + data['platform']);
        }
        // ensure the json data is a string
        if (data['origin_domain'] && !(typeof data['origin_domain'] === 'string' || data['origin_domain'] instanceof String)) {
            throw new Error("Expected the field `origin_domain` to be a primitive type in the JSON string but got " + data['origin_domain']);
        }
        // validate the optional field `profile`
        if (data['profile']) { // data not null
          MeGet200ResponseProfile.validateJSON(data['profile']);
        }
        // ensure the json data is a string
        if (data['company_id'] && !(typeof data['company_id'] === 'string' || data['company_id'] instanceof String)) {
            throw new Error("Expected the field `company_id` to be a primitive type in the JSON string but got " + data['company_id']);
        }
        // validate the optional field `token_metadata`
        if (data['token_metadata']) { // data not null
          MeGet200ResponseTokenMetadata.validateJSON(data['token_metadata']);
        }
        // validate the optional field `api_key_info`
        if (data['api_key_info']) { // data not null
          MeGet200ResponseApiKeyInfo.validateJSON(data['api_key_info']);
        }

        return true;
    }


}

MeGet200Response.RequiredProperties = ["user_id", "auth_method", "profile", "company_id", "role_id"];

/**
 * Firebase user ID
 * @member {String} user_id
 */
MeGet200Response.prototype['user_id'] = undefined;

/**
 * User email address
 * @member {String} email
 */
MeGet200Response.prototype['email'] = undefined;

/**
 * Authentication method used
 * @member {module:model/MeGet200Response.AuthMethodEnum} auth_method
 */
MeGet200Response.prototype['auth_method'] = undefined;

/**
 * Platform origin
 * @member {String} platform
 */
MeGet200Response.prototype['platform'] = undefined;

/**
 * Request origin domain
 * @member {String} origin_domain
 */
MeGet200Response.prototype['origin_domain'] = undefined;

/**
 * @member {module:model/MeGet200ResponseProfile} profile
 */
MeGet200Response.prototype['profile'] = undefined;

/**
 * Company ID from authentication claims
 * @member {String} company_id
 */
MeGet200Response.prototype['company_id'] = undefined;

/**
 * Role ID from authentication claims
 * @member {Number} role_id
 */
MeGet200Response.prototype['role_id'] = undefined;

/**
 * @member {module:model/MeGet200ResponseTokenMetadata} token_metadata
 */
MeGet200Response.prototype['token_metadata'] = undefined;

/**
 * @member {module:model/MeGet200ResponseApiKeyInfo} api_key_info
 */
MeGet200Response.prototype['api_key_info'] = undefined;





/**
 * Allowed values for the <code>auth_method</code> property.
 * @enum {String}
 * @readonly
 */
MeGet200Response['AuthMethodEnum'] = {

    /**
     * value: "jwt_token"
     * @const
     */
    "jwt_token": "jwt_token",

    /**
     * value: "api_key"
     * @const
     */
    "api_key": "api_key"
};



export default MeGet200Response;

