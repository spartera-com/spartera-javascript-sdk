/**
 * Spartera API Documentation
 * Auto-generated API documentation for REST services of the Spartera platform
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@spartera.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Connection model module.
 * @module model/Connection
 * @version 0.0.0
 */
class Connection {
    /**
     * Constructs a new <code>Connection</code>.
     * Model for every connection setup from our platform
     * @alias module:model/Connection
     * @param engineId {String} 
     * @param companyId {String} 
     * @param visibility {String} 
     */
    constructor(engineId, companyId, visibility) { 
        
        Connection.initialize(this, engineId, companyId, visibility);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, engineId, companyId, visibility) { 
        obj['engine_id'] = engineId;
        obj['company_id'] = companyId;
        obj['visibility'] = visibility;
    }

    /**
     * Constructs a <code>Connection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Connection} obj Optional instance to populate.
     * @return {module:model/Connection} The populated <code>Connection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Connection();

            if (data.hasOwnProperty('connection_id')) {
                obj['connection_id'] = ApiClient.convertToType(data['connection_id'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
            if (data.hasOwnProperty('engine_id')) {
                obj['engine_id'] = ApiClient.convertToType(data['engine_id'], 'String');
            }
            if (data.hasOwnProperty('company_id')) {
                obj['company_id'] = ApiClient.convertToType(data['company_id'], 'String');
            }
            if (data.hasOwnProperty('credential_type')) {
                obj['credential_type'] = ApiClient.convertToType(data['credential_type'], 'String');
            }
            if (data.hasOwnProperty('api_provider')) {
                obj['api_provider'] = ApiClient.convertToType(data['api_provider'], 'String');
            }
            if (data.hasOwnProperty('api_endpoint')) {
                obj['api_endpoint'] = ApiClient.convertToType(data['api_endpoint'], 'String');
            }
            if (data.hasOwnProperty('api_key_location')) {
                obj['api_key_location'] = ApiClient.convertToType(data['api_key_location'], 'String');
            }
            if (data.hasOwnProperty('api_key_param')) {
                obj['api_key_param'] = ApiClient.convertToType(data['api_key_param'], 'String');
            }
            if (data.hasOwnProperty('api_key_value')) {
                obj['api_key_value'] = ApiClient.convertToType(data['api_key_value'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('gcp_secret_id')) {
                obj['gcp_secret_id'] = ApiClient.convertToType(data['gcp_secret_id'], 'String');
            }
            if (data.hasOwnProperty('provider_domain')) {
                obj['provider_domain'] = ApiClient.convertToType(data['provider_domain'], 'String');
            }
            if (data.hasOwnProperty('verified_usage_ability')) {
                obj['verified_usage_ability'] = ApiClient.convertToType(data['verified_usage_ability'], 'String');
            }
            if (data.hasOwnProperty('date_created')) {
                obj['date_created'] = ApiClient.convertToType(data['date_created'], 'String');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Connection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Connection</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Connection.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['connection_id'] && !(typeof data['connection_id'] === 'string' || data['connection_id'] instanceof String)) {
            throw new Error("Expected the field `connection_id` to be a primitive type in the JSON string but got " + data['connection_id']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }
        // ensure the json data is a string
        if (data['engine_id'] && !(typeof data['engine_id'] === 'string' || data['engine_id'] instanceof String)) {
            throw new Error("Expected the field `engine_id` to be a primitive type in the JSON string but got " + data['engine_id']);
        }
        // ensure the json data is a string
        if (data['company_id'] && !(typeof data['company_id'] === 'string' || data['company_id'] instanceof String)) {
            throw new Error("Expected the field `company_id` to be a primitive type in the JSON string but got " + data['company_id']);
        }
        // ensure the json data is a string
        if (data['credential_type'] && !(typeof data['credential_type'] === 'string' || data['credential_type'] instanceof String)) {
            throw new Error("Expected the field `credential_type` to be a primitive type in the JSON string but got " + data['credential_type']);
        }
        // ensure the json data is a string
        if (data['api_provider'] && !(typeof data['api_provider'] === 'string' || data['api_provider'] instanceof String)) {
            throw new Error("Expected the field `api_provider` to be a primitive type in the JSON string but got " + data['api_provider']);
        }
        // ensure the json data is a string
        if (data['api_endpoint'] && !(typeof data['api_endpoint'] === 'string' || data['api_endpoint'] instanceof String)) {
            throw new Error("Expected the field `api_endpoint` to be a primitive type in the JSON string but got " + data['api_endpoint']);
        }
        // ensure the json data is a string
        if (data['api_key_location'] && !(typeof data['api_key_location'] === 'string' || data['api_key_location'] instanceof String)) {
            throw new Error("Expected the field `api_key_location` to be a primitive type in the JSON string but got " + data['api_key_location']);
        }
        // ensure the json data is a string
        if (data['api_key_param'] && !(typeof data['api_key_param'] === 'string' || data['api_key_param'] instanceof String)) {
            throw new Error("Expected the field `api_key_param` to be a primitive type in the JSON string but got " + data['api_key_param']);
        }
        // ensure the json data is a string
        if (data['api_key_value'] && !(typeof data['api_key_value'] === 'string' || data['api_key_value'] instanceof String)) {
            throw new Error("Expected the field `api_key_value` to be a primitive type in the JSON string but got " + data['api_key_value']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['gcp_secret_id'] && !(typeof data['gcp_secret_id'] === 'string' || data['gcp_secret_id'] instanceof String)) {
            throw new Error("Expected the field `gcp_secret_id` to be a primitive type in the JSON string but got " + data['gcp_secret_id']);
        }
        // ensure the json data is a string
        if (data['provider_domain'] && !(typeof data['provider_domain'] === 'string' || data['provider_domain'] instanceof String)) {
            throw new Error("Expected the field `provider_domain` to be a primitive type in the JSON string but got " + data['provider_domain']);
        }
        // ensure the json data is a string
        if (data['verified_usage_ability'] && !(typeof data['verified_usage_ability'] === 'string' || data['verified_usage_ability'] instanceof String)) {
            throw new Error("Expected the field `verified_usage_ability` to be a primitive type in the JSON string but got " + data['verified_usage_ability']);
        }
        // ensure the json data is a string
        if (data['date_created'] && !(typeof data['date_created'] === 'string' || data['date_created'] instanceof String)) {
            throw new Error("Expected the field `date_created` to be a primitive type in the JSON string but got " + data['date_created']);
        }
        // ensure the json data is a string
        if (data['last_updated'] && !(typeof data['last_updated'] === 'string' || data['last_updated'] instanceof String)) {
            throw new Error("Expected the field `last_updated` to be a primitive type in the JSON string but got " + data['last_updated']);
        }
        // ensure the json data is a string
        if (data['active'] && !(typeof data['active'] === 'string' || data['active'] instanceof String)) {
            throw new Error("Expected the field `active` to be a primitive type in the JSON string but got " + data['active']);
        }

        return true;
    }


}

Connection.RequiredProperties = ["engine_id", "company_id", "visibility"];

/**
 * @member {String} connection_id
 */
Connection.prototype['connection_id'] = undefined;

/**
 * @member {String} user_id
 */
Connection.prototype['user_id'] = undefined;

/**
 * @member {String} engine_id
 */
Connection.prototype['engine_id'] = undefined;

/**
 * @member {String} company_id
 */
Connection.prototype['company_id'] = undefined;

/**
 * @member {String} credential_type
 */
Connection.prototype['credential_type'] = undefined;

/**
 * @member {String} api_provider
 */
Connection.prototype['api_provider'] = undefined;

/**
 * @member {String} api_endpoint
 */
Connection.prototype['api_endpoint'] = undefined;

/**
 * @member {String} api_key_location
 */
Connection.prototype['api_key_location'] = undefined;

/**
 * @member {String} api_key_param
 */
Connection.prototype['api_key_param'] = undefined;

/**
 * @member {String} api_key_value
 */
Connection.prototype['api_key_value'] = undefined;

/**
 * @member {String} visibility
 */
Connection.prototype['visibility'] = undefined;

/**
 * @member {String} name
 */
Connection.prototype['name'] = undefined;

/**
 * @member {String} description
 */
Connection.prototype['description'] = undefined;

/**
 * @member {String} gcp_secret_id
 */
Connection.prototype['gcp_secret_id'] = undefined;

/**
 * @member {String} provider_domain
 */
Connection.prototype['provider_domain'] = undefined;

/**
 * @member {String} verified_usage_ability
 */
Connection.prototype['verified_usage_ability'] = undefined;

/**
 * @member {String} date_created
 */
Connection.prototype['date_created'] = undefined;

/**
 * @member {String} last_updated
 */
Connection.prototype['last_updated'] = undefined;

/**
 * @member {String} active
 */
Connection.prototype['active'] = undefined;






export default Connection;

