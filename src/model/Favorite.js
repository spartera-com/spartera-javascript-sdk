/**
 * Spartera API Documentation
 * Auto-generated API documentation for REST services of the Spartera platform
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@spartera.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Favorite model module.
 * @module model/Favorite
 * @version 0.0.0
 */
class Favorite {
    /**
     * Constructs a new <code>Favorite</code>.
     * User favorites for marketplace assets
     * @alias module:model/Favorite
     * @param assetId {String} 
     * @param companyId {String} 
     * @param priority {String} 
     */
    constructor(assetId, companyId, priority) { 
        
        Favorite.initialize(this, assetId, companyId, priority);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, assetId, companyId, priority) { 
        obj['asset_id'] = assetId;
        obj['company_id'] = companyId;
        obj['priority'] = priority;
    }

    /**
     * Constructs a <code>Favorite</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Favorite} obj Optional instance to populate.
     * @return {module:model/Favorite} The populated <code>Favorite</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Favorite();

            if (data.hasOwnProperty('favorite_id')) {
                obj['favorite_id'] = ApiClient.convertToType(data['favorite_id'], 'String');
            }
            if (data.hasOwnProperty('asset_id')) {
                obj['asset_id'] = ApiClient.convertToType(data['asset_id'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
            if (data.hasOwnProperty('company_id')) {
                obj['company_id'] = ApiClient.convertToType(data['company_id'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'String');
            }
            if (data.hasOwnProperty('date_created')) {
                obj['date_created'] = ApiClient.convertToType(data['date_created'], 'String');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Favorite</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Favorite</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Favorite.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['favorite_id'] && !(typeof data['favorite_id'] === 'string' || data['favorite_id'] instanceof String)) {
            throw new Error("Expected the field `favorite_id` to be a primitive type in the JSON string but got " + data['favorite_id']);
        }
        // ensure the json data is a string
        if (data['asset_id'] && !(typeof data['asset_id'] === 'string' || data['asset_id'] instanceof String)) {
            throw new Error("Expected the field `asset_id` to be a primitive type in the JSON string but got " + data['asset_id']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }
        // ensure the json data is a string
        if (data['company_id'] && !(typeof data['company_id'] === 'string' || data['company_id'] instanceof String)) {
            throw new Error("Expected the field `company_id` to be a primitive type in the JSON string but got " + data['company_id']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['priority'] && !(typeof data['priority'] === 'string' || data['priority'] instanceof String)) {
            throw new Error("Expected the field `priority` to be a primitive type in the JSON string but got " + data['priority']);
        }
        // ensure the json data is a string
        if (data['date_created'] && !(typeof data['date_created'] === 'string' || data['date_created'] instanceof String)) {
            throw new Error("Expected the field `date_created` to be a primitive type in the JSON string but got " + data['date_created']);
        }
        // ensure the json data is a string
        if (data['last_updated'] && !(typeof data['last_updated'] === 'string' || data['last_updated'] instanceof String)) {
            throw new Error("Expected the field `last_updated` to be a primitive type in the JSON string but got " + data['last_updated']);
        }
        // ensure the json data is a string
        if (data['active'] && !(typeof data['active'] === 'string' || data['active'] instanceof String)) {
            throw new Error("Expected the field `active` to be a primitive type in the JSON string but got " + data['active']);
        }

        return true;
    }


}

Favorite.RequiredProperties = ["asset_id", "company_id", "priority"];

/**
 * @member {String} favorite_id
 */
Favorite.prototype['favorite_id'] = undefined;

/**
 * @member {String} asset_id
 */
Favorite.prototype['asset_id'] = undefined;

/**
 * @member {String} user_id
 */
Favorite.prototype['user_id'] = undefined;

/**
 * @member {String} company_id
 */
Favorite.prototype['company_id'] = undefined;

/**
 * @member {String} notes
 */
Favorite.prototype['notes'] = undefined;

/**
 * @member {String} category
 */
Favorite.prototype['category'] = undefined;

/**
 * @member {String} priority
 */
Favorite.prototype['priority'] = undefined;

/**
 * @member {String} date_created
 */
Favorite.prototype['date_created'] = undefined;

/**
 * @member {String} last_updated
 */
Favorite.prototype['last_updated'] = undefined;

/**
 * @member {String} active
 */
Favorite.prototype['active'] = undefined;






export default Favorite;

